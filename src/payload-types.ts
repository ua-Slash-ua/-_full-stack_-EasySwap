/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    pages: Page;
    reviews: Review;
    currencies: Currency;
    applications: Application;
    'request-categories': RequestCategory;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    reviews: ReviewsSelect<false> | ReviewsSelect<true>;
    currencies: CurrenciesSelect<false> | CurrenciesSelect<true>;
    applications: ApplicationsSelect<false> | ApplicationsSelect<true>;
    'request-categories': RequestCategoriesSelect<false> | RequestCategoriesSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    contacts: Contact;
  };
  globalsSelect: {
    contacts: ContactsSelect<false> | ContactsSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  slug: string;
  title: string;
  description?: string | null;
  blocks?:
    | (
        | {
            enabled?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'hero-block';
          }
        | {
            enabled?: boolean | null;
            aside_title: string;
            aside_icon: string;
            aside_number: string;
            aside_description: string;
            cards?:
              | {
                  card_title: string;
                  card_number: string;
                  card_description: string;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'numbers-block';
          }
        | {
            enabled?: boolean | null;
            title: string;
            word: string;
            icon: string;
            id?: string | null;
            blockName?: string | null;
            blockType: 'promise-block';
          }
        | {
            enabled?: boolean | null;
            why_we_the_best: {
              title?: string | null;
              why_point?:
                | {
                    why_icon: string;
                    why_description: string;
                    id?: string | null;
                  }[]
                | null;
            };
            what_do_you_get: {
              title?: string | null;
              what_point?:
                | {
                    what_icon: string;
                    what_description: string;
                    id?: string | null;
                  }[]
                | null;
            };
            id?: string | null;
            blockName?: string | null;
            blockType: 'double-block';
          }
        | {
            enabled?: boolean | null;
            services?:
              | {
                  service_title: string;
                  service_icon: string;
                  how_does_it_work: {
                    how_does_it_work_description?: string | null;
                    id?: string | null;
                  }[];
                  features: {
                    features_description?: string | null;
                    id?: string | null;
                  }[];
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'service-block';
          }
        | {
            enabled?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'currencies-block';
          }
        | {
            enabled?: boolean | null;
            elements?:
              | {
                  question: string;
                  answer: string;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'faq-block';
          }
        | {
            enabled?: boolean | null;
            description: string;
            id?: string | null;
            blockName?: string | null;
            blockType: 'support-block';
          }
        | {
            enabled?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'review-block';
          }
        | {
            enabled?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'application-block';
          }
        | {
            enabled?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'contact-block';
          }
        | {
            enabled?: boolean | null;
            data?: string | null;
            items?:
              | {
                  title: string;
                  content?: {
                    root: {
                      type: string;
                      children: {
                        type: string;
                        version: number;
                        [k: string]: unknown;
                      }[];
                      direction: ('ltr' | 'rtl') | null;
                      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                      indent: number;
                      version: number;
                    };
                    [k: string]: unknown;
                  } | null;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'accordion-block';
          }
      )[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reviews".
 */
export interface Review {
  id: string;
  title: string;
  description: string;
  photo: string | Media;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "currencies".
 */
export interface Currency {
  id: string;
  code: string;
  name: string;
  cat_type: 'fiat' | 'crypto';
  cat_date: 'standard' | 'new' | 'old';
  icon: string | Media;
  ratesByCurrency?:
    | {
        currency: string | Currency;
        from_1000: {
          buy1000: number;
          sell1000: number;
        };
        from_5000: {
          buy5000: number;
          sell5000: number;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "applications".
 */
export interface Application {
  id: string;
  requestCategory?: (string | null) | RequestCategory;
  phone: string;
  telegramNick: string;
  meta?:
    | {
        key: string;
        value?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "request-categories".
 */
export interface RequestCategory {
  id: string;
  title: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'pages';
        value: string | Page;
      } | null)
    | ({
        relationTo: 'reviews';
        value: string | Review;
      } | null)
    | ({
        relationTo: 'currencies';
        value: string | Currency;
      } | null)
    | ({
        relationTo: 'applications';
        value: string | Application;
      } | null)
    | ({
        relationTo: 'request-categories';
        value: string | RequestCategory;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  slug?: T;
  title?: T;
  description?: T;
  blocks?:
    | T
    | {
        'hero-block'?:
          | T
          | {
              enabled?: T;
              id?: T;
              blockName?: T;
            };
        'numbers-block'?:
          | T
          | {
              enabled?: T;
              aside_title?: T;
              aside_icon?: T;
              aside_number?: T;
              aside_description?: T;
              cards?:
                | T
                | {
                    card_title?: T;
                    card_number?: T;
                    card_description?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        'promise-block'?:
          | T
          | {
              enabled?: T;
              title?: T;
              word?: T;
              icon?: T;
              id?: T;
              blockName?: T;
            };
        'double-block'?:
          | T
          | {
              enabled?: T;
              why_we_the_best?:
                | T
                | {
                    title?: T;
                    why_point?:
                      | T
                      | {
                          why_icon?: T;
                          why_description?: T;
                          id?: T;
                        };
                  };
              what_do_you_get?:
                | T
                | {
                    title?: T;
                    what_point?:
                      | T
                      | {
                          what_icon?: T;
                          what_description?: T;
                          id?: T;
                        };
                  };
              id?: T;
              blockName?: T;
            };
        'service-block'?:
          | T
          | {
              enabled?: T;
              services?:
                | T
                | {
                    service_title?: T;
                    service_icon?: T;
                    how_does_it_work?:
                      | T
                      | {
                          how_does_it_work_description?: T;
                          id?: T;
                        };
                    features?:
                      | T
                      | {
                          features_description?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        'currencies-block'?:
          | T
          | {
              enabled?: T;
              id?: T;
              blockName?: T;
            };
        'faq-block'?:
          | T
          | {
              enabled?: T;
              elements?:
                | T
                | {
                    question?: T;
                    answer?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        'support-block'?:
          | T
          | {
              enabled?: T;
              description?: T;
              id?: T;
              blockName?: T;
            };
        'review-block'?:
          | T
          | {
              enabled?: T;
              id?: T;
              blockName?: T;
            };
        'application-block'?:
          | T
          | {
              enabled?: T;
              id?: T;
              blockName?: T;
            };
        'contact-block'?:
          | T
          | {
              enabled?: T;
              id?: T;
              blockName?: T;
            };
        'accordion-block'?:
          | T
          | {
              enabled?: T;
              data?: T;
              items?:
                | T
                | {
                    title?: T;
                    content?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reviews_select".
 */
export interface ReviewsSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  photo?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "currencies_select".
 */
export interface CurrenciesSelect<T extends boolean = true> {
  code?: T;
  name?: T;
  cat_type?: T;
  cat_date?: T;
  icon?: T;
  ratesByCurrency?:
    | T
    | {
        currency?: T;
        from_1000?:
          | T
          | {
              buy1000?: T;
              sell1000?: T;
            };
        from_5000?:
          | T
          | {
              buy5000?: T;
              sell5000?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "applications_select".
 */
export interface ApplicationsSelect<T extends boolean = true> {
  requestCategory?: T;
  phone?: T;
  telegramNick?: T;
  meta?:
    | T
    | {
        key?: T;
        value?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "request-categories_select".
 */
export interface RequestCategoriesSelect<T extends boolean = true> {
  title?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contacts".
 */
export interface Contact {
  id: string;
  phone?: string | null;
  footer_words: {
    word_1: string;
    word_2: string;
    word_3: string;
  };
  social_networks?: {
    telegram?: {
      footer_icon?: string | null;
      location_icon?: string | null;
      link?: string | null;
    };
    instagram?: {
      footer_icon?: string | null;
      location_icon?: string | null;
      link?: string | null;
    };
    tik_tok?: {
      footer_icon?: string | null;
      location_icon?: string | null;
      link?: string | null;
    };
  };
  locations?:
    | {
        is_location?: boolean | null;
        address?: string | null;
        description?: string | null;
        schedule?: string | null;
        phone?: string | null;
        /**
         * @minItems 2
         * @maxItems 2
         */
        coords?: [number, number] | null;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contacts_select".
 */
export interface ContactsSelect<T extends boolean = true> {
  phone?: T;
  footer_words?:
    | T
    | {
        word_1?: T;
        word_2?: T;
        word_3?: T;
      };
  social_networks?:
    | T
    | {
        telegram?:
          | T
          | {
              footer_icon?: T;
              location_icon?: T;
              link?: T;
            };
        instagram?:
          | T
          | {
              footer_icon?: T;
              location_icon?: T;
              link?: T;
            };
        tik_tok?:
          | T
          | {
              footer_icon?: T;
              location_icon?: T;
              link?: T;
            };
      };
  locations?:
    | T
    | {
        is_location?: T;
        address?: T;
        description?: T;
        schedule?: T;
        phone?: T;
        coords?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}